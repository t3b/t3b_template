//
// SASS Mixins
//
// @package #{$package_name()}
// @path settings/_mixins.scss
// @author Tyll Wei√ü <t.weiss@exinit.de>
// @link http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins
//


// =============================================================================
// Image-Dimensions
// =============================================================================
@mixin img-wh($img) {
  width: image-width($img);
  height: image-height($img);
}
@mixin hdpi-img($img) {
  background-size: image-width($img)/2 image-height($img)/2;
  background-image: image-url('#{$img}');
}


// =============================================================================
// Image-Replacement Helper
// =============================================================================
@mixin image-replacement($img) {
  @include img-wh('#{$img}');
  background-image: image-url('#{$img}');
}


// =============================================================================
// Grid init Mixin
// =============================================================================
// Generates gird classes, with a bunch of options like setting a prefix or the property
// e.g.:
// @include grid(1 2 3 4 5 6 8 10 12, $prefix: 'm--', $property: 'height');
// =============================================================================
@mixin grid($stack: $gridStack, $prefix: '', $property: 'width', $type: '') {
  // Starts the loop
  @each $i in $stack {
    // Set the class-prefix and convert the passed number to their word equivalents
    .#{$prefix}#{convert-number-to-word($i)} {
      // Depending on the $type it will adjust the calculation
      @if $type == 'offset' {
        // Calculation fix for all offset-by classes
        #{$property}: gridCalc($i, $totalColumns) + ($columnGutter);
      } @else { // Standard case
        // Sets the property and passes the calculation via the gridCalc function in _functions.scss
        #{$property}: gridCalc($i, $totalColumns);
      }
    }
  }
}


// =============================================================================
// REM Unit Mixin
// =============================================================================
// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value
// Thanks to Harry Roberts (@csswizardry)
// =============================================================================
@mixin font-size($size, $append-vrythm: false) {
  font-size: $size +px;
  font-size: ($size / 16)*1rem;
  @if $append-vrythm == true {
    line-height: ceil($size / $baseLineHeight) * ($baseLineHeight / $size);
  }
}


// =============================================================================
// CSS3 Triangle
// =============================================================================
// .foo {
//   @include css-triangle(5px, #fff, bottom);
// }
// =============================================================================
@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangleSize;
  @if ($triangleDirection == top) { border-color: $triangleColor transparent transparent transparent; }
  @if ($triangleDirection == bottom) { border-color: transparent transparent $triangleColor transparent; }
  @if ($triangleDirection == left) { border-color: transparent transparent transparent $triangleColor; }
  @if ($triangleDirection == right) { border-color: transparent $triangleColor transparent transparent; }
}


// =============================================================================
// Media Queries
// =============================================================================
// .foo {
//   float: left;
//   width: 1000px;
//   background: image-url('foo.png') center center no-repeat;
//
//   @include respondTo(tablet) {
//     float: none;
//     width: 600px;
//   }
//   @include respondTo(smartphoneLarge) {
//     width: 480px;
//   }
//   @include respondTo(smartphoneSmall) {
//     width: 280px;
//   }
//   @include respondTo(HDPI) {
//     background-image: image-url('hdpi/foo.png');
//     @include img-whr('hdpi/foo.png');
//   }
// }
// =============================================================================
@mixin respondTo($media) {
  @if $media == tablet {
    @media screen and (min-width:$query-smartphoneLarge +1px) and (max-width:$query-tablet) { @content; }
  }
  @if $media == smartphoneLarge {
    @media screen and (min-width:$query-smartphoneSmall +1px) and (max-width:$query-smartphoneLarge) { @content; }
  }
  @if $media == smartphoneSmall {
    @media screen and (max-width:$query-smartphoneSmall) { @content; }
  }
  @if $media == HDPI {
    @media print, (-o-min-device-pixel-ratio: 5/4), (-webkit-min-device-pixel-ratio: 1.25), (min-resolution: 120dpi) { @content; }
  }
}


// =============================================================================
// CSS Viewport rule Mixin
// =============================================================================
// Basicly the same as <meta name="viewport" content="width=device-width">
// but the future proof way.
//
// DOCS: http://dev.w3.org/csswg/css-device-adapt/
// =============================================================================
@mixin viewport($width: '', $height: '', $zoom: '', $orientation: '', $user-zoom: '') {
  @-webkit-viewport {
    @if $width != '' { width: $width; }
    @if $height != '' { height: $height; }
    @if $zoom != '' { zoom: $zoom; }
    @if $orientation != '' { orientation: $orientation; }
    @if $user-zoom != '' { user-zoom: $user-zoom; }
  }
  @-moz-viewport {
    @if $width != '' { width: $width; }
    @if $height != '' { height: $height; }
    @if $zoom != '' { zoom: $zoom; }
    @if $orientation != '' { orientation: $orientation; }
    @if $user-zoom != '' { user-zoom: $user-zoom; }
  }
  @-ms-viewport {
    @if $width != '' { width: $width; }
    @if $height != '' { height: $height; }
    @if $zoom != '' { zoom: $zoom; }
    @if $orientation != '' { orientation: $orientation; }
    @if $user-zoom != '' { user-zoom: $user-zoom; }
  }
  @-o-viewport {
    @if $width != '' { width: $width; }
    @if $height != '' { height: $height; }
    @if $zoom != '' { zoom: $zoom; }
    @if $orientation != '' { orientation: $orientation; }
    @if $user-zoom != '' { user-zoom: $user-zoom; }
  }
  @viewport {
    @if $width != '' { width: $width; }
    @if $height != '' { height: $height; }
    @if $zoom != '' { zoom: $zoom; }
    @if $orientation != '' { orientation: $orientation; }
    @if $user-zoom != '' { user-zoom: $user-zoom; }
  }
}


// =============================================================================
// CSS Hyphens mixin
// =============================================================================
@mixin hyphens($arg) {
  -webkit-hyphens: $arg;
     -moz-hyphens: $arg;
      -ms-hyphens: $arg;
       -o-hyphens: $arg;
          hyphens: $arg;
}


// =============================================================================
// Input placeholder Mixin
// =============================================================================
@mixin placeholder($color) {
  &::-webkit-input-placeholder { color: $color; }
  &:-moz-placeholder { color: $color; }
  &:-ms-input-placeholder { color: $color; }
}